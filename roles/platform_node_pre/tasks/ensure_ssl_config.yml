---

# noqa yaml[line-length]
# yamllint disable rule:line-length

- name: "Configure local variables"
  ansible.builtin.set_fact:
    l_ssl_ca_cert_path: "{{ ssl_config.ssl_ca_cert_path }}"
    l_ssl_certs_dir: "{{ ssl_config.ssl_certs_dir }}"
    l_ssl_cert_path: "{{ ssl_config.ssl_cert_path }}"
    l_ssl_key_path: "{{ ssl_config.ssl_key_path }}"
    l_ssl_passfile: "{{ ssl_config.ssl_passfile }}"
    l_ssl_rsa_key_pass: "{{ ssl_config.ssl_rsa_key_pass }}"
    l_ssl_private_key_cipher: "{{ ssl_config.ssl_private_key_cipher }}"
    l_ssl_private_key_size: "{{ ssl_config.ssl_private_key_size }}"
    l_ssl_private_key_pem_path: "{{ ssl_config.ssl_private_key_pem_path }}"
    l_ssl_csr_path: "{{ ssl_config.ssl_csr_path }}"
    l_ssl_crt_service_type: "{{ ssl_config.ssl_crt_service_type }}"
    l_ssl_crt_force_regen: "{{ ssl_config.ssl_crt_force_regen }}"
    l_csr_digest: "{{ ssl_config.csr_digest }}"
    l_csr_organization_name: "{{ ssl_config.csr_organization_name }}"
    l_csr_organization_unit_name: "{{ ssl_config.csr_organization_unit_name }}"
    l_csr_locality_name: "{{ ssl_config.csr_locality_name }}"
    l_csr_state_or_province_name: "{{ ssl_config.csr_state_or_province_name }}"
    l_csr_country_name: "{{ ssl_config.csr_country_name }}"
    l_csr_email_address: "{{ ssl_config.csr_email_address }}"


# Create the SSL key, cert, and certmonger tracking for host
- name: "Create the secure certs directory"
  ansible.builtin.file:
    path: "{{ l_ssl_certs_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0600"

- name: "Set target service name"
  ansible.builtin.set_fact:
    target_service: "{{ l_ssl_crt_service_type }}/{{ ansible_fqdn }}"

- name: "Ensure target service is present"
  community.general.ipa_service:
    name: "{{ target_service }}"
    state: present
    ipa_host: "{{ auth_source_fqdn }}"
    ipa_user: "{{ auth_source_username }}"
    ipa_pass: "{{ auth_source_password }}"

- name: "Check for an existing certificate file"
  ansible.builtin.stat:
    path: "{{ l_ssl_cert_path }}"
  register: cert_exists

- name: "Cert exists and regen requested - stop tracking and clean up"
  when: cert_exists.stat.exists and l_ssl_crt_force_regen
  block:
    # This code works more reliably than any current module
    # setting noqa
    - name: "Get cert serial number"  # noqa command-instead-of-module risky-shell-pipe
      ansible.builtin.shell: "echo '{{ auth_source_password }}' | kinit {{ auth_source_username }}; ipa cert-find --subject='{{ ansible_fqdn }}' --file='{{ l_ssl_cert_path }}' | grep 'Serial number:' | cut -c18-"
      register: serial_num
      changed_when: serial_num.rc == 0

    - name: "Get the certificate associated with the service" # noqa command-instead-of-module risky-shell-pipe
      ansible.builtin.shell: 'echo "{{ auth_source_password }}" | kinit "{{ auth_source_username }}"; ipa cert-find --subject="{{ ansible_fqdn }}" --file="{{ l_ssl_cert_path }}" --services="{{ target_service }}" | grep "Certificate:" | cut -c16-'
      register: cert
      changed_when: cert.rc == 0

    - name: "Stop tracking cert with certmonger"
      ansible.builtin.shell: "echo '{{ auth_source_password }}' | kinit {{ auth_source_username }}; ipa-getcert stop-tracking -k {{ l_ssl_key_path }} -f {{ l_ssl_cert_path }} -i {{ ansible_fqdn }}"
      ignore_errors: true
      register: stop_tracking_result
      changed_when: stop_tracking_result.rc == 0

    - name: "Remove the old cert from the service"
      ansible.builtin.shell: 'echo "{{ auth_source_password }}" | kinit "{{ auth_source_username }}"; ipa service-remove-cert "{{ target_service }}" --certificate="{{ cert.stdout_lines.1 }}"'
      ignore_errors: true
      register: service_remove_cert
      changed_when: service_remove_cert.rc == 0

    - name: "Revoke the old cert with reason 6 - certificateHold - an admin can completely revoke it later"
      ansible.builtin.shell: "echo '{{ auth_source_password }}' | kinit {{ auth_source_username }}; ipa cert-revoke {{ serial_num.stdout_lines.1 }} --revocation-reason=6"
      ignore_errors: true
      register: revoke_cert
      changed_when: revoke_cert.rc == 0

    - name: "Cert exists, rename old cert .revoked"
      ansible.builtin.copy:
        src: "{{ l_ssl_cert_path }}"
        dest: "{{ l_ssl_cert_path }}.revoked"
        mode: "0600"
        owner: "root"
        group: "root"
        remote_src: true


- name: "Generating new certificate"
  when: l_ssl_crt_force_regen or not cert_exists.stat.exists
  block:

    - name: "Generate configuration files"
      ansible.builtin.lineinfile:
        path: "{{ l_ssl_passfile }}"
        state: present
        create: true
        line: "{{ l_ssl_rsa_key_pass }}"
        mode: "0740"
        owner: "root"
        group: "root"

    - name: "Preparing request"
      ansible.builtin.command: "openssl genrsa -{{ l_ssl_private_key_cipher }} -out {{ l_ssl_private_key_pem_path }} -passout file:/{{ l_ssl_passfile }} {{ l_ssl_private_key_size }}"
      register: genrsa_result
      changed_when: genrsa_result == 0

    - name: "Preparing request"
      ansible.builtin.command: "openssl rsa -in {{ l_ssl_private_key_pem_path }} -out {{ l_ssl_key_path }} -passin file:/{{ l_ssl_passfile }}"
      register: transform_key
      changed_when: transform_key.rc == 0

    - name: "Create certificate signing request"
      ansible.builtin.command: "openssl req -new -key {{ l_ssl_key_path }} -out {{ l_ssl_csr_path }} -subj \"/C={{ l_csr_country_name }}/ST={{ l_csr_state_or_province_name }}/L={{ l_csr_locality_name }}/O={{ l_csr_organization_name }}/OU={{ l_csr_organization_unit_name }}/CN={{ ansible_fqdn }}/subjectAltName=DNS.1={{ ansible_fqdn }}\""
      register: gencsr_result
      changed_when: gencsr_result.rc == 0

    - name: "Generate the certificate for the service" # noqa risky-shell-pipe
      ansible.builtin.shell: "echo '{{ auth_source_password }}' | kinit {{ auth_source_username }}; ipa cert-request --add --principal={{ target_service }} {{ l_ssl_csr_path }} --certificate-out={{ l_ssl_cert_path }}"
      register: gencert_result
      changed_when: gencert_result.rc == 0

    - name: "Ensure that certmonger starts-tracking the new certificate for autorenewals" # noqa risky-shell-pipe
      ansible.builtin.shell: "echo '{{ auth_source_password }}' | kinit {{ auth_source_username }}; ipa-getcert start-tracking -k {{ l_ssl_key_path }} -f {{ l_ssl_cert_path }} -I {{ ansible_fqdn }}"
      register: trackcert_result
      changed_when: trackcert_result.rc == 0

- name: "Generate the certificate hash" # noqa risky-shell-pipe
  ansible.builtin.shell: "openssl x509 -noout -modulus -in {{ l_ssl_cert_path }} | openssl md5"
  register: cert_hash
  changed_when: cert_hash.rc == 0

- name: "Generate the key hash" # noqa risky-shell-pipe
  ansible.builtin.shell: "openssl rsa -noout -modulus -in  {{ l_ssl_key_path }} | openssl md5"
  register: key_hash
  changed_when: key_hash.rc == 0

- name: Verify the files
  ansible.builtin.assert:
    that: cert_hash.stdout == key_hash.stdout

- name: Pausing one minute for replication
  ansible.builtin.wait_for:
    timeout: 60

- name: "Check the certifcate against our CA"
  ansible.builtin.command: "openssl verify --CAfile {{ l_ssl_ca_cert_path }} {{ l_ssl_cert_path }}"
  register: result
  changed_when: result.rc == 0

- name: Verify the result
  ansible.builtin.assert:
    that: "'OK' in result.stdout"

- name: Cleanup
  ansible.builtin.file:
    path: "{{ l_ssl_passfile }}"
    state: absent
