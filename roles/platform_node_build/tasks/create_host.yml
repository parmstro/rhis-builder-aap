---
# Create the host based on the parameters
- name: "Set deployment defaults"
  ansible.builtin.set_fact:
    target_mac: '{{ host.mac | default("ff:ff:ff:ff:ff:ff") }}'
    target_compute_resource: "{{ host.compute_resource }}"

- name: "A baremetal deployment has been requested. Gathering discovered host information."
  when: host.compute_resource == "baremetal"
  connection: local
  block:
    - name: "Set deployment defaults"
      ansible.builtin.set_fact:
        default_search_string: "mac = {{ target_mac }}"

    - name: "Get info on discovered hosts that meet criteria"
      ansible.builtin.include_tasks: "get_foreman_list.yml"
      vars:
        gfl_sat_username: "{{ satellite_admin_username }}"
        gfl_sat_password: "{{ satellite_admin_password }}"
        gfl_sat_server_url: "{{ satellite_server_url }}"
        gfl_sat_validate_certs: "{{ satellite_validate_certs }}"
        gfl_sat_organization: "{{ host.organization | default(omit) }}"
        gfl_sat_params: "{{ host.params | default(omit) }}"
        gfl_sat_resource: "{{ discovered_hosts_resource }}"
        gfl_sat_search_string: "{{ host.search | default(default_search_string) }}"

    - name: "Get the returned resources"
      ansible.builtin.set_fact:
        discovered_hosts_resources: "{{ gfl_resources }}"

    - name: "Log the returned resources"
      ansible.builtin.debug:
        var: discovered_hosts_resources

    - name: "Generate list of available hosts"
      ansible.builtin.set_fact:
        discovered_mac: "{{ dhr.mac }}"
        discovered_name: "{{ dhr.name }}"
        nic_count: "{{ dhr.facts_hash.interfaces.split(',') | length }}"
      loop: "{{ discovered_hosts_resources }}"
      loop_control:
        loop_var: dhr
      register: available_hosts

    - name: "Selecting first discovered host matching criteria"
      when: available_hosts.results | length > 0
      block:

        - name: "Filter the results for available nics"
          when:
            - host.compute_resource == "baremetal" and (host.mac == "ff:ff:ff:ff:ff:ff" or host.mac is not defined)
            - host.req_nic_count and current_host.nic_count > host.req_nic_count
          ansible.builtin.set_fact:
            has_nics: true
          loop: "{{ available_hosts.results | list }}"
          loop_control:
            loop_var: targethost
          register: available_hosts

        - name: "Select the first available host"
          ansible.builtin.set_fact:
            target: "{{ available_hosts.results | json_query('[].targethost.ansible_facts') | list | first }}"

        - name: "Set the build values"
          ansible.builtin.set_fact:
            target_mac: "{{ target.discovered_mac }}"
            target_name: "{{ target.discovered_name }}"
            target_compute_resource: "{{ None }}"

      rescue:
        - name: "Deployment Failure"
          ansible.builtin.fail:
            msg: "There are no discovered hosts that meet the criteria"

- name: "Deploy the host"
  connection: local
  redhat.satellite.host:
    username: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    server_url: "{{ satellite_server_url }}"
    organization: "{{ host.organization }}"
    location: "{{ host.location }}"
    name: "{{ host.fqdn }}"
    comment: "{{ host.build_comment | default(omit) }}"
    hostgroup: "{{ host.hostgroup }}"
    kickstart_repository: "{{ host.kickstart_repository | default(omit) }}"
    compute_resource: "{{ target_compute_resource | default(omit) }}"
    compute_profile: "{{ host.compute_profile | default(omit) }}"
    mac: "{{ target_mac }}"
    build: true
    state: present
    validate_certs: "{{ satellite_validate_certs }}"
    compute_attributes:
      start: "1"
  register: deploy_response

- name: "The result of the deployment operation was:"
  ansible.builtin.debug:
    var: deploy_response

- name: "Restart the host"
  when: host.compute_resource == "baremetal"
  connection: local
  ansible.builtin.uri:
    url: "{{ satellite_server_url }}/api/v2/discovered_hosts/{{ target_name }}/reboot"
    method: PUT
    user: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    force_basic_auth: true
    validate_certs: "{{ satellite_validate_certs }}"
    status_code: 200
    headers:
      Content-Type: application/json
      Accept: :application/json,version=2
  register: restart_response

- name: "The result of the baremetal reboot operation was:"
  when: host.compute_resource == "baremetal"
  connection: local
  ansible.builtin.debug:
    var: restart_response

- name: "A baremetal deployment was requested - removing the discovered host entry"
  when: host.compute_resource == "baremetal"
  connection: local
  ansible.builtin.uri:
    url: "{{ satellite_server_url }}/api/v2/discovered_hosts/{{ target_name }}"
    method: DELETE
    user: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    force_basic_auth: true
    validate_certs: "{{ satellite_validate_certs }}"
    status_code: 200
    headers:
      Content-Type: application/json
      Accept: :application/json,version=2
  register: remove_response

- name: "The result of the discovered host removal operation was:"
  when: host.compute_resource == "baremetal"
  connection: local
  ansible.builtin.debug:
    var: remove_response
